{"/home/travis/build/npmtest/node-npmtest-penthouse/test.js":"/* istanbul instrument in package npmtest_penthouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-penthouse/lib.npmtest_penthouse.js":"/* istanbul instrument in package npmtest_penthouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_penthouse = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_penthouse = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-penthouse/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-penthouse && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_penthouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_penthouse\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_penthouse.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_penthouse.rollup.js'] =\n            local.assetsDict['/assets.npmtest_penthouse.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_penthouse.__dirname + '/lib.npmtest_penthouse.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/index.js":"/*\n * Node module wrapper for the PhantomJS script\n */\n\n'use strict'\n\nvar fs = require('fs')\nvar tmp = require('tmp')\nvar path = require('path')\nvar spawn = require('child_process').spawn\nvar phantomjs = require('phantomjs-prebuilt')\nvar phantomJsBinPath = phantomjs.path\nvar apartment = require('apartment')\nvar cssAstFormatter = require('css')\nvar osTmpdir = require('os-tmpdir')\nvar postformatting = require('./postformatting/')\nvar normalizeCss = require('./normalize-css')\n\n// for phantomjs\nvar configString = '--config=' + path.join(__dirname, 'phantomjs', 'config.json')\nvar script = path.join(__dirname, 'phantomjs', 'core.js')\n\nvar DEFAULT_VIEWPORT_WIDTH = 1300 // px\nvar DEFAULT_VIEWPORT_HEIGHT = 900 // px\nvar DEFAULT_TIMEOUT = 30000 // ms\nvar DEFAULT_MAX_EMBEDDED_BASE64_LENGTH = 1000 // chars\nvar DEFAULT_USER_AGENT = 'Penthouse Critical Path CSS Generator'\nvar TMP_DIR = osTmpdir()\nvar DEFAULT_RENDER_WAIT_TIMEOUT = 100\nvar DEFAULT_BLOCK_JS_REQUESTS = true\n\nvar toPhantomJsOptions = function (maybeOptionsHash) {\n  if (typeof maybeOptionsHash !== 'object') {\n    return [];\n  }\n  return Object.keys(maybeOptionsHash).map(function (optName) {\n    return '--' + optName + '=' + maybeOptionsHash[optName];\n  })\n}\n\nfunction penthouseScriptArgs (options, astFilename) {\n  // need to annotate forceInclude values to allow RegExp to pass through JSON serialization\n  var forceInclude = (options.forceInclude || []).map(function (forceIncludeValue) {\n    if (typeof forceIncludeValue === 'object' && forceIncludeValue.constructor.name === 'RegExp') {\n      return { type: 'RegExp', value: forceIncludeValue.source }\n    }\n    return { value: forceIncludeValue }\n  })\n  // TODO: should just stringify the whole thing and parse inside, rather than doing like this,\n  // since the command line util no longer used\n  return [\n    options.url || '',\n    astFilename,\n    options.width || DEFAULT_VIEWPORT_WIDTH,\n    options.height || DEFAULT_VIEWPORT_HEIGHT,\n    JSON.stringify(forceInclude), // stringify to maintain array\n    options.userAgent || DEFAULT_USER_AGENT,\n    options.renderWaitTime || DEFAULT_RENDER_WAIT_TIMEOUT,\n    (typeof options.blockJSRequests !== 'undefined' ? options.blockJSRequests : DEFAULT_BLOCK_JS_REQUESTS),\n    // object, needs to be stringified\n    JSON.stringify(options.customPageHeaders || {}),\n    m.DEBUG\n  ]\n}\n\nfunction writeAstToFile (ast) {\n  // save ast to file\n  var tmpobj = tmp.fileSync({dir: TMP_DIR})\n  fs.writeFileSync(tmpobj.name, JSON.stringify(ast))\n  return tmpobj\n}\n\nvar m = module.exports = function (options, callback) { // jshint ignore: line\n  var stdOut = ''\n  var stdErr = ''\n  // debugging\n  var START_TIME = Date.now()\n  var debuglog = function (msg, isError) {\n    if (m.DEBUG) {\n      var errMsg = 'time: ' + (Date.now() - START_TIME) + ' | ' + (isError ? 'ERR: ' : '') + msg\n      stdErr += errMsg\n      console.error(errMsg)\n    }\n  }\n  normalizeCss.DEBUG = m.DEBUG\n\n  function generateCriticalCss (ast) {\n    var debuggingHelp = '',\n        cp,\n        killTimeout\n\n    var timeoutWait = options.timeout || DEFAULT_TIMEOUT\n\n    var astTmpobj = writeAstToFile(ast)\n\n    var scriptArgs = penthouseScriptArgs(options, astTmpobj.name)\n\n    var phantomJsArgs = [configString].concat(toPhantomJsOptions(options.phantomJsOptions))\n    phantomJsArgs.push(script)\n    phantomJsArgs = phantomJsArgs.concat(scriptArgs)\n\n    cp = spawn(phantomJsBinPath, phantomJsArgs)\n\n    // Errors arise before the process starts\n    cp.on('error', function (err) {\n      debuggingHelp += 'Error executing penthouse using ' + phantomJsBinPath\n      debuggingHelp += err.stack\n      err.debug = debuggingHelp\n      callback(err)\n      // remove the tmp file we created\n      // library would clean up after process ends, but this is better for long living proccesses\n      astTmpobj.removeCallback()\n    })\n\n    cp.stdout.on('data', function (data) {\n      stdOut += data\n    })\n\n    cp.stderr.on('data', function (data) {\n      stdErr += data\n      debuglog(String(data))\n    })\n\n    cp.on('close', function (code) {\n      if (code !== 0) {\n        debuggingHelp += 'PhantomJS process closed with code ' + code\n      }\n    })\n\n    // kill after timeout\n    killTimeout = setTimeout(function () {\n      var msg = 'Penthouse timed out after ' + timeoutWait / 1000 + 's. '\n      debuggingHelp += msg\n      stdErr += msg\n      cp.kill('SIGTERM')\n    }, timeoutWait)\n\n    cp.on('exit', function (code) {\n      if (code === 0) {\n        // promise purely for catching errors,\n        // that otherwise exit node\n        new Promise(function (resolve) {\n          var finalCss = postformatting(stdOut, {\n            maxEmbeddedBase64Length: typeof options.maxEmbeddedBase64Length === 'number' ? options.maxEmbeddedBase64Length : DEFAULT_MAX_EMBEDDED_BASE64_LENGTH\n          }, m.DEBUG, START_TIME)\n\n          if (finalCss.trim().length === 0) {\n            // TODO: this error should surface to user\n            debuglog('Note: Generated critical css was empty for URL: ' + options.url)\n          } else {\n            // remove irrelevant css properties\n            finalCss = apartment(finalCss, {\n              properties: [\n                '(.*)transition(.*)',\n                'cursor',\n                'pointer-events',\n                '(-webkit-)?tap-highlight-color',\n                '(.*)user-select'\n              ],\n              // TODO: move into core phantomjs script\n              selectors: [\n                '::(-moz-)?selection'\n              ]\n            })\n          }\n          callback(null, finalCss)\n          resolve()\n          return\n        })\n        .catch(function (err) {\n          callback(err)\n        })\n      } else {\n        debuggingHelp += 'PhantomJS process exited with code ' + code\n        var err = new Error(stdErr + stdOut)\n        err.code = code\n        err.debug = debuggingHelp\n        err.stdout = stdOut\n        err.stderr = stdErr\n        callback(err)\n      }\n      // we're done here - clean up\n      clearTimeout(killTimeout)\n      // can't rely on that the parent process will be terminated any time soon,\n      // need to rm listeners and kill child process manually\n      process.removeListener('exit', exitHandler)\n      process.removeListener('SIGTERM', sigtermHandler)\n      // remove the tmp file we created\n      // library would clean up after process ends, but this is better for long living proccesses\n      astTmpobj.removeCallback()\n      cp.kill('SIGTERM')\n    })\n\n    function exitHandler () {\n      cp.kill('SIGTERM')\n    }\n    function sigtermHandler () {\n      cp.kill('SIGTERM')\n      process.exit(0)\n    }\n    process.on('exit', exitHandler)\n    process.on('SIGTERM', sigtermHandler)\n  }\n\n  function generateAstFromCssFile(cssfilepath) {\n    // read the css and parse the ast\n    // if errors, normalize css and try again\n    // only then pass css to penthouse\n    return new Promise(function (resolve, reject) {\n      var css\n      try {\n        css = fs.readFileSync(cssfilepath, 'utf8')\n      } catch (e) {\n        reject(e.message)\n        return\n      }\n      debuglog('opened css file')\n\n      var ast = cssAstFormatter.parse(css, { silent: true })\n      var parsingErrors = ast.stylesheet.parsingErrors.filter(function (err) {\n        // the forked version of the astParser used fixes these errors itself\n        return err.reason !== 'Extra closing brace'\n      })\n      if (parsingErrors.length === 0) {\n        debuglog('parsed ast (without errors)')\n        resolve(ast)\n        return\n      }\n\n      // had breaking parsing errors\n      // NOTE: only informing about first error, even if there were more than one.\n      var parsingErrorMessage = parsingErrors[0].message\n      if (options.strict === true) {\n        reject(parsingErrorMessage)\n        return\n      }\n\n      debuglog('Failed ast formatting css \\'' + parsingErrorMessage + '\\': ')\n      var normalizeScriptArgs = [\n        options.url || '',\n        options.css || '',\n        options.userAgent || DEFAULT_USER_AGENT,\n        m.DEBUG\n      ]\n      normalizeCss(\n        normalizeScriptArgs,\n        function (err, normalizedCss) {\n          debuglog('normalized css: ' + (normalizedCss ? normalizedCss.length : typeof normalizedCss))\n          ast = cssAstFormatter.parse(normalizedCss, { silent: true })\n          debuglog('parsed normalised css into ast')\n          var parsingErrors = ast.stylesheet.parsingErrors.filter(function (err) {\n            // the forked version of the astParser used fixes these errors itself\n            return err.reason !== 'Extra closing brace'\n          })\n          if (parsingErrors.length > 0) {\n            debuglog('..with parsingErrors: ' + parsingErrors[0].reason)\n          }\n          resolve(ast)\n          return\n        }\n      )\n    })\n  }\n\n  generateAstFromCssFile(options.css)\n  .then(generateCriticalCss)\n  .catch(callback)\n}\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/postformatting/index.js":"'use strict'\n\nvar cssAstFormatter = require('css')\nvar embeddedbase64Remover = require('./embedded-base64-remover')\nvar ffRemover = require('./unused-fontface-remover')\nvar unusedKeyframeRemover = require('./unused-keyframe-remover')\n\n// PhantomJS spits out these messages straight into stdOut,\n// causing it to mix with our critical css.\n// AFAIK no better way to handle this than to hard code and filter them out here\nvar removePhantomJSSecurityErrors = function (stdOut) {\n  stdOut = stdOut.replace('Unsafe JavaScript attempt to access frame with URL about:blank from frame with URL ', '')\n  stdOut = stdOut.replace(/file:\\/\\/.*core.js\\./, '')\n  stdOut = stdOut.replace(' Domains, protocols and ports must match.', '')\n  return stdOut\n}\n\nmodule.exports = function postformatting (stdOutString, criticalCssOptions, debugMode, START_TIME) {\n  var debuglog = function (msg, isError) {\n    if (debugMode) {\n      console.error('time: ' + (Date.now() - START_TIME) + ' | ' + (isError ? 'ERR: ' : '') + 'postformatting: ' + msg)\n    }\n  }\n\n  var cssAstRulesJsonString = removePhantomJSSecurityErrors(stdOutString)\n  debuglog('remove phantom js security errors')\n\n  var criticalRules = JSON.parse(cssAstRulesJsonString)\n  debuglog('JSON parse')\n\n  criticalRules = unusedKeyframeRemover(criticalRules)\n  debuglog('unusedKeyframeRemover')\n\n\n  var finalCss = cssAstFormatter.stringify({\n    stylesheet: {\n      rules: criticalRules\n    }\n  })\n  debuglog('stringify from ast')\n\n  // remove data-uris that are too long\n  // ..faster if this removal can be combined with @font-face one into same iteration..\n  finalCss = embeddedbase64Remover(finalCss, criticalCssOptions.maxEmbeddedBase64Length)\n  debuglog('embeddedbase64Remover')\n\n  // remove unused @fontface rules\n  finalCss = ffRemover(finalCss)\n  debuglog('ffRemover')\n\n  return finalCss\n}\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/postformatting/embedded-base64-remover.js":"'use strict'\n\nvar cssAstFormatter = require('css')\n\nvar BASE64_ENCODE_PATTERN = /data:[^,]*base64,/\n\nvar _isTooLongBase64Encoded = function (declaration, maxEmbeddedBase64Length) {\n  return BASE64_ENCODE_PATTERN.test(declaration.value) && declaration.value.length > maxEmbeddedBase64Length\n}\n\nvar _removeDataUrisFromRule = function (rule, maxEmbeddedBase64Length) {\n  if (rule.type === 'font-face') {\n    var hasSrc = false\n    rule.declarations = rule.declarations.filter(function (declaration) {\n      if (_isTooLongBase64Encoded(declaration, maxEmbeddedBase64Length)) {\n        return false\n      } else if (declaration.property === 'src') {\n        hasSrc = true\n      }\n      return true\n    })\n    if (!hasSrc) {\n      return null\n    }\n  } else if (rule.type === 'rule') {\n    rule.declarations = rule.declarations.filter(function (declaration) {\n      if (_isTooLongBase64Encoded(declaration, maxEmbeddedBase64Length)) {\n        return false\n      }\n      return true\n    })\n  } else if (rule.type === 'media') {\n    var rules = rule.rules.map(function (rule) { return _removeDataUrisFromRule(rule, maxEmbeddedBase64Length) })\n    rule.rules = rules.filter(function (rule) {\n      return Boolean(rule)\n    })\n    return rule\n  }\n  return rule\n}\n\nvar embeddedbase64Remover = function (css, maxEmbeddedBase64Length) {\n  var ast = cssAstFormatter.parse(css)\n  var rules = ast.stylesheet.rules.map(function (rule) { return _removeDataUrisFromRule(rule, maxEmbeddedBase64Length) })\n  rules = rules.filter(function (rule) {\n    return Boolean(rule)\n  })\n\n  return cssAstFormatter.stringify({\n    stylesheet: {\n      rules: rules\n    }\n  })\n}\n\nmodule.exports = embeddedbase64Remover\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/postformatting/unused-fontface-remover.js":"/*\nmodule for removing unused fontface rules - can be used both for the standalone node binary and the phantomjs script\n*/\n\n'use strict'\n\nfunction unusedFontfaceRemover (css) {\n  var toDeleteSections = []\n\n  // extract full @font-face rules\n  var fontFaceRegex = /(@font-face[ \\s\\S]*?\\{([\\s\\S]*?)\\})/gm,\n      ff\n\n  while ((ff = fontFaceRegex.exec(css)) !== null) {\n    // grab the font name declared in the @font-face rule\n    // (can still be in quotes, f.e. 'Lato Web'\n    var t = /font-family[^:]*?:[ ]*([^;]*)/.exec(ff[1])\n    if (!t || typeof t[1] === 'undefined') {\n      continue // no font-family in @fontface rule!\n    }\n\n    // rm quotes\n    var fontName = t[1].replace(/['\"]/gm, '')\n\n    // does this fontname appear as a font-family or font (shorthand) value?\n    var fontNameRegex = new RegExp('([^{}]*?){[^}]*?font(-family)?[^:]*?:[^;]*' + fontName + '[^,;]*[,;]', 'gmi')\n\n    var fontFound = false,\n        m\n\n    while ((m = fontNameRegex.exec(css)) !== null) {\n      if (m[1].indexOf('@font-face') === -1) {\n        // log('FOUND, keep rule')\n        fontFound = true\n        break\n      }\n    }\n    if (!fontFound) {\n      // NOT FOUND, rm!\n\n      // can't remove rule here as it will screw up ongoing while (exec ...) loop.\n      // instead: save indices and delete AFTER for loop\n      var closeRuleIndex = css.indexOf('}', ff.index)\n      // unshift - add to beginning of array - we need to remove rules in reverse order,\n      // otherwise indeces will become incorrect again.\n      toDeleteSections.unshift({\n        start: ff.index,\n        end: closeRuleIndex + 1\n      })\n    }\n  }\n  // now delete the @fontface rules we registed as having no matches in the css\n  for (var i = 0; i < toDeleteSections.length; i++) {\n    var start = toDeleteSections[i].start,\n        end = toDeleteSections[i].end\n    css = css.substring(0, start) + css.substring(end)\n  }\n\n  return css\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = unusedFontfaceRemover\n}\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/postformatting/unused-keyframe-remover.js":"'use strict'\n\nfunction getAllKeyframes(rules) {\n  var matches = []\n  function handleRule (rule) {\n    if (rule.type === 'rule') {\n      ;(rule.declarations || []).forEach(function (props) {\n        if (props.property === 'animation' || props.property === 'animation-name') {\n          matches.push(props.value.split(' ')[0])\n        }\n      })\n    } else if (rule.type === 'media') {\n      ;(rule.rules || []).forEach(handleRule)\n    }\n  }\n  rules.forEach(handleRule)\n  return matches\n}\n\nfunction unusedKeyframeRemover (rules) {\n  var usedKeyFrames = getAllKeyframes(rules)\n\n  function filterUnusedKeyframeRule (rule) {\n    if (rule.type === 'media') {\n      // mutating the original object..\n      rule.rules = rule.rules.filter(filterUnusedKeyframeRule)\n      return rule.rules.length > 0\n    }\n    if (rule.type !== 'keyframes') {\n      return true\n    }\n    // remove unnused keyframes rules\n    return usedKeyFrames.indexOf(rule.name) !== -1\n  }\n\n  // remove all unknown keyframes\n  return rules.filter(filterUnusedKeyframeRule)\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = unusedKeyframeRemover\n}\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/normalize-css.js":"/*\n * normalize css wrapper for PhantomJS\n * only called if original css cannot be parsed by the css ast parser\n */\n\n'use strict'\n\nvar path = require('path')\nvar spawn = require('child_process').spawn\nvar phantomjs = require('phantomjs-prebuilt')\nvar phantomJsBinPath = phantomjs.path\nvar script = path.join(__dirname, 'phantomjs', 'normalize-css.js')\nvar configString = '--config=' + path.join(__dirname, 'phantomjs', 'config.json')\nvar DEFAULT_TIMEOUT = 30000\n\n// TODO: export from postformatting\nvar removePhantomJSSecurityErrors = function (stdOut) {\n  stdOut = stdOut.replace('Unsafe JavaScript attempt to access frame with URL about:blank from frame with URL ', '')\n  stdOut = stdOut.replace(/file:\\/\\/.*core.js\\./, '')\n  stdOut = stdOut.replace(' Domains, protocols and ports must match.', '')\n  return stdOut\n}\n\nvar m = module.exports = function (scriptArgs, callback) {\n  var stdOut = '',\n      stdErr = '',\n      debuggingHelp = '',\n      cp,\n      killTimeout\n  var timeoutWait = DEFAULT_TIMEOUT\n\n  var phantomJsArgs = [configString, script].concat(scriptArgs).concat([m.DEBUG])\n\n\n  cp = spawn(phantomJsBinPath, phantomJsArgs)\n\n  // Errors arise before the process starts\n  cp.on('error', function (err) {\n    debuggingHelp += 'Error executing penthouse using ' + phantomJsBinPath\n    debuggingHelp += err.stack\n    err.debug = debuggingHelp\n    callback(err)\n  })\n\n  cp.stdout.on('data', function (data) {\n    stdOut += data\n  })\n\n  cp.stderr.on('data', function (data) {\n    stdErr += data\n    if (m.DEBUG) {\n      console.error(String(data))\n    }\n  })\n\n  cp.on('close', function (code) {\n    if (code !== 0) {\n      debuggingHelp += 'PhantomJS process closed with code ' + code\n    }\n  })\n\n  // kill after timeout\n  killTimeout = setTimeout(function () {\n    var msg = 'Penthouse normalization step timed out after ' + timeoutWait / 1000 + 's. '\n    debuggingHelp += msg\n    stdErr += msg\n    cp.kill('SIGTERM')\n  }, timeoutWait)\n\n  cp.on('exit', function (code) {\n    if (code === 0) {\n      var finalCss = removePhantomJSSecurityErrors(stdOut)\n      callback(null, finalCss)\n    } else {\n      debuggingHelp += 'PhantomJS process exited with code ' + code\n      var err = new Error(stdErr + stdOut)\n      err.code = code\n      err.debug = debuggingHelp\n      err.stdout = stdOut\n      err.stderr = stdErr\n      callback(err)\n    }\n    // we're done here - clean up\n    clearTimeout(killTimeout)\n    // can't rely on that the parent process will be terminated any time soon,\n    // need to rm listeners and kill child process manually\n    process.removeListener('exit', exitHandler)\n    process.removeListener('SIGTERM', sigtermHandler)\n    cp.kill('SIGTERM')\n  })\n\n  function exitHandler () {\n    cp.kill('SIGTERM')\n  }\n  function sigtermHandler () {\n    cp.kill('SIGTERM')\n    process.exit(0)\n  }\n  process.on('exit', exitHandler)\n  process.on('SIGTERM', sigtermHandler)\n}\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/phantomjs/core.js":"'use strict'\n\nvar fs = require('fs')\n// phantom js related\nvar system = require('system')\nvar webpage = require('webpage')\n\nvar nonMatchingMediaQueryRemover = require('./non-matching-media-query-remover')\n\nvar GENERATION_DONE = 'GENERATION_DONE'\n\nvar stdout = system.stdout // for using this as a file\nvar page // initialised in prepareNewPage\n\nvar args = system.args\nif (args.length < 4) {\n  errorlog('Not enough arguments.')\n  phantomExit(1)\n}\n\nvar criticalCssOptions = {\n  url: encodeURI(args[1]),\n  ast: args[2],\n  width: args[3],\n  height: args[4],\n  // always forceInclude '*' selector\n  forceInclude: [{ value: '*' }].concat(JSON.parse(args[5]) || []),\n  userAgent: args[6],\n  renderWaitTime: parseInt(args[7], 10),\n  blockJSRequests: args[8],\n  customPageHeaders: JSON.parse(args[9]) || {},\n  debugMode: args[10] === 'true'\n}\n\nfunction debuglog (msg, isError) {\n  if (criticalCssOptions.debugMode) {\n    system.stderr.write((isError ? 'ERR: ' : '') + msg)\n  }\n}\n\n// monkey patch for directing errors to stderr\n// https://github.com/ariya/phantomjs/issues/10150#issuecomment-28707859\nfunction errorlog (msg) {\n  if (criticalCssOptions.debugMode) {\n    debuglog(msg, true)\n  } else {\n    system.stderr.write(msg)\n  }\n}\n\nfunction prepareNewPage () {\n  debuglog('prepareNewPage')\n  page = webpage.create()\n  // don't confuse analytics more than necessary when visiting websites\n  page.settings.userAgent = criticalCssOptions.userAgent\n  page.customHeaders = criticalCssOptions.customPageHeaders\n\n  /* prevent page JS errors from being output to final CSS */\n  page.onError = function () {\n    // do nothing\n  }\n\n  page.onConsoleMessage = function (msg) {\n    // filter out console messages from the page\n    // - the ones sent by penthouse for debugging has 'debug: ' prefix.\n    if (/^debug: /.test(msg)) {\n      debuglog(msg.replace(/^debug: /, ''))\n    }\n  }\n\n  page.onResourceRequested = function (requestData, request) {\n    if (criticalCssOptions.blockJSRequests !== 'false' && /\\.js(\\?.*)?$/.test(requestData.url)) {\n      request.abort()\n    }\n  }\n\n  page.onResourceError = function (resourceError) {\n    page.reason = resourceError.errorString\n    page.reason_url = resourceError.url // jshint ignore: line\n  }\n  page.onCallback = function (callbackObject) {\n    if (callbackObject.status === GENERATION_DONE) {\n      debuglog('GENERATION_DONE')\n      returnCssFromAstRules(callbackObject.rules)\n    }\n  }\n}\n\nfunction returnCssFromAstRules (criticalRules) {\n  debuglog('returnCssFromAstRules')\n  try {\n    if (criticalRules && criticalRules.length > 0) {\n      stdout.write(JSON.stringify(criticalRules))\n      debuglog('finalCss: write - DONE!')\n      phantomExit(0)\n    } else {\n      // No css. Warning will be raised later in process.\n      // for consisteny, still generate output (will be empty)\n      stdout.write([JSON.stringify([])])\n      phantomExit(0)\n    }\n  } catch (ex) {\n    errorlog('error in returnCssFromAstRules: ' + ex)\n    phantomExit(1)\n  }\n}\n\n// discard stdout from phantom exit\nfunction phantomExit (code) {\n  if (page) {\n    page.close()\n  }\n  setTimeout(function () {\n    phantom.exit(code)\n  }, 0)\n}\n\n// called inside a sandboxed environment inside phantomjs - no outside references\n// arguments and return value must be primitives\n// @see http://phantomjs.org/api/webpage/method/evaluate.html\nfunction pruneNonCriticalCss (astRules, forceInclude, renderWaitTime, doneStatus) {\n  console.log('debug: pruneNonCriticalCss')\n  var h = window.innerHeight\n\n  var psuedoSelectorsToKeep = [\n    ':before',\n    ':after',\n    ':visited',\n    ':first-letter',\n    ':first-line'\n  ]\n  // detect these selectors regardless of whether one or two semi-colons are used\n  var psuedoSelectorsToKeepRegex = psuedoSelectorsToKeep.map(function (s) {\n    return ':?' + s\n  }).join('|') // separate in regular expression\n  // we will replace all instances of these psuedo selectors; hence global flag\n  var PSUEDO_SELECTOR_REGEXP = new RegExp(psuedoSelectorsToKeepRegex, 'g')\n\n  var isElementAboveFold = function (element) {\n    // temporarily force clear none in order to catch elements that clear previous content themselves and who w/o their styles could show up unstyled in above the fold content (if they rely on f.e. 'clear:both;' to clear some main content)\n    var originalClearStyle = element.style.clear || ''\n    element.style.clear = 'none'\n    var aboveFold = element.getBoundingClientRect().top < h\n\n    // set clear style back to what it was\n    element.style.clear = originalClearStyle\n\n    if (!aboveFold) {\n      // phantomJS/QT browser has some bugs regarding fixed position;\n      // sometimes positioning elements outside of screen incorrectly.\n      // just keep all fixed position elements - normally very few in a stylesheet anyway\n      var styles = window.getComputedStyle(element, null)\n      if (styles.position === 'fixed') {\n        console.log('debug: force keeping fixed position styles')\n        return true\n      }\n    }\n    return aboveFold\n  }\n\n  var matchesForceInclude = function (selector) {\n    return forceInclude.some(function (includeSelector) {\n      if (includeSelector.type === 'RegExp') {\n        var pattern = new RegExp(includeSelector.value)\n        return pattern.test(selector)\n      }\n      return includeSelector.value === selector\n    })\n  }\n\n  var isSelectorCritical = function (selector) {\n    if (matchesForceInclude(selector.trim())) {\n      return true\n    }\n\n    // Case 3: @-rule with full CSS (rules) inside [REMAIN]\n    // @viewport, @-ms-viewport. AST parser classifies these as \"regular\" rules\n    if (/^@/.test(selector)) {\n      return true\n    }\n\n    // some selectors can't be matched on page.\n    // In these cases we test a slightly modified selectors instead, modifiedSelector.\n    var modifiedSelector = selector\n    if (modifiedSelector.indexOf(':') > -1) {\n      // handle special case selectors, the ones that contain a semi colon (:)\n      // many of these selectors can't be matched to anything on page via JS,\n      // but that still might affect the above the fold styling\n\n      // these psuedo selectors depend on an element, so test element instead\n      // (:hover, :focus, :active would be treated same\n      // IF we wanted to keep them for critical path css, but we don't)\n      modifiedSelector = modifiedSelector.replace(PSUEDO_SELECTOR_REGEXP, '')\n\n      // if selector is purely psuedo (f.e. ::-moz-placeholder), just keep as is.\n      // we can't match it to anything on page, but it can impact above the fold styles\n      if (modifiedSelector.replace(/:[:]?([a-zA-Z0-9\\-_])*/g, '').trim().length === 0) {\n        return true\n      }\n\n      // handle browser specific psuedo selectors bound to elements,\n      // Example, button::-moz-focus-inner, input[type=number]::-webkit-inner-spin-button\n      // remove browser specific pseudo and test for element\n      modifiedSelector = modifiedSelector.replace(/:?:-[a-z-]*/g, '')\n    }\n\n    // now we have a selector to test, first grab any matching elements\n    var elements\n    try {\n      elements = document.querySelectorAll(modifiedSelector)\n    } catch (e) {\n      // not a valid selector, remove it.\n      return false\n    }\n\n    // some is not supported on Arrays in this version of QT browser,\n    // meaning have to write much less terse code here.\n    var elementIndex = 0\n    var aboveFold = false\n    while (!aboveFold && elementIndex < elements.length) {\n      aboveFold = isElementAboveFold(elements[elementIndex])\n      elementIndex++\n    }\n    return aboveFold\n  }\n\n  var isCssRuleCritical = function (rule) {\n    if (rule.type === 'rule') {\n      // check what, if any selectors are found above fold\n      rule.selectors = rule.selectors.filter(isSelectorCritical)\n      return rule.selectors.length > 0\n    }\n    /* ==@-rule handling==*/\n    /* - Case 0 : Non nested @-rule [REMAIN]\n     (@charset, @import, @namespace)\n     */\n    if (\n      rule.type === 'charset' ||\n      rule.type === 'import' ||\n      rule.type === 'namespace'\n    ) {\n      return true\n    }\n\n    /* Case 1: @-rule with CSS properties inside [REMAIN]\n      @font-face, @keyframes - keep here, but remove later in code, unless it is used.\n    */\n    if (\n        rule.type === 'font-face' ||\n        rule.type === 'keyframes'\n    ) {\n      return true\n    }\n\n    /* Case 3: @-rule with full CSS (rules) inside [REMAIN]\n    */\n    if (\n      // non matching media queries are stripped out in non-matching-media-query-remover.js\n      rule.type === 'media' ||\n      rule.type === 'document' ||\n      rule.type === 'supports'\n    ) {\n      rule.rules = rule.rules.filter(isCssRuleCritical)\n      return rule.rules.length > 0\n    }\n\n    return false\n  }\n\n  var processCssRules = function () {\n    console.log('debug: processCssRules BEFORE')\n    var criticalRules = astRules.filter(isCssRuleCritical)\n    console.log('debug: processCssRules AFTER')\n\n    // we're done - call final function to exit outside of phantom evaluate scope\n    window.callPhantom({\n      status: doneStatus,\n      rules: criticalRules\n    })\n  }\n\n  // give some time (renderWaitTime) for sites like facebook that build their page dynamically,\n  // otherwise we can miss some selectors (and therefor rules)\n  // --tradeoff here: if site is too slow with dynamic content,\n  //\tit doesn't deserve to be in critical path.\n  setTimeout(processCssRules, renderWaitTime)\n}\n\n/*\n * Tests each selector in css file at specified resolution,\n * to see if any such elements appears above the fold on the page\n * calls callPhantom when done, with an updated AST rules list\n *\n * @param options.url the url as a string\n * @param options.ast the css as an AST object\n * @param options.width the width of viewport\n * @param options.height the height of viewport\n ---------------------------------------------------------*/\nfunction getCriticalPathCss (options) {\n  debuglog('getCriticalPathCss')\n  prepareNewPage()\n  page.viewportSize = {\n    width: options.width,\n    height: options.height\n  }\n  // first strip out non matching media queries\n  var astRules = nonMatchingMediaQueryRemover(options.ast.stylesheet.rules, options.width, options.height)\n  debuglog('stripped out non matching media queries')\n\n  page.open(options.url, function (status) {\n    if (status === 'success') {\n      debuglog('page opened')\n      page.evaluate(pruneNonCriticalCss, astRules, options.forceInclude, options.renderWaitTime, GENERATION_DONE)\n    } else {\n      errorlog('Error opening url \\'' + page.reason_url + '\\': ' + page.reason) // jshint ignore: line\n      phantomExit(1)\n    }\n  })\n}\n\ndebuglog('Penthouse core start')\nvar ast\ntry {\n  var f = fs.open(criticalCssOptions.ast, 'r')\n  ast = f.read()\n  debuglog('opened ast from file')\n  ast = JSON.parse(ast)\n  debuglog('parsed ast from json')\n} catch (e) {\n  errorlog(e)\n  phantomExit(1)\n}\n\ncriticalCssOptions.ast = ast\ngetCriticalPathCss(criticalCssOptions)\n","/home/travis/build/npmtest/node-npmtest-penthouse/node_modules/penthouse/lib/phantomjs/non-matching-media-query-remover.js":"'use strict'\n\nvar cssMediaQuery = require('css-mediaquery')\n// only filter out: print, min-width > width and min-height > height\n\nfunction _isMatchingMediaQuery (rule, matchConfig) {\n  if (rule.type !== 'media') {\n    // ignore (keep) all non media query rules\n    return true\n  }\n\n  var mediaAST\n  try {\n    mediaAST = cssMediaQuery.parse(rule.media)\n  } catch (e) {\n    // cant parse, most likely browser cant either\n    return false\n  }\n  var keep = mediaAST.some(function (mq) {\n    if (mq.type === 'print') {\n      return false\n    }\n    // f.e. @media all {}\n    // go for false positives over false negatives,\n    // i.e. accept @media randomThing {}\n    if (mq.expressions.length === 0) {\n      return true\n    }\n    return mq.expressions.some(function (expression) {\n      if (expression.modifier === 'min') {\n        return cssMediaQuery.match('(min-' + expression.feature + ':' + expression.value + ')', matchConfig)\n      } else {\n        return true\n      }\n    })\n  })\n  return keep\n}\n\nfunction nonMatchingMediaQueryRemover (rules, width, height) {\n  var matchConfig = { type: 'screen', width: width + 'px', height: height + 'px' }\n  return rules.filter(function (rule) {\n    return _isMatchingMediaQuery(rule, matchConfig)\n  })\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = nonMatchingMediaQueryRemover\n}\n"}